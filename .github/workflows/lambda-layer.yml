name: Lambda Layer Deploy

on:
  push:
    branches: [dev]
    paths:
      - 'lambdas/layers/common_models/**'  # only triggered when common_models changes

jobs:
  deploy-layer-and-update-lambdas:
    runs-on: ubuntu-latest

    env:
      S3_BUCKET_NAME: emenu-lambda-code-bucket
      LAYER_NAME: common-mongoose-models
      REGION: ap-southeast-2

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Layer dependencies
        working-directory: lambdas/layers/common_models/nodejs
        run: npm install

      - name: Package Layer zip
        working-directory: lambdas/layers/common_models
        run: zip -r common_models_layer.zip nodejs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Upload Layer zip to S3
        run: |
          aws s3 cp lambdas/layers/common_models/common_models_layer.zip s3://$S3_BUCKET_NAME/layers/common_models/common_models_layer.zip

      - name: Publish new Layer Version
        id: publish_layer
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name $LAYER_NAME \
            --description "Updated common models layer via GitHub Actions" \
            --content S3Bucket=$S3_BUCKET_NAME,S3Key=layers/common_models/common_models_layer.zip \
            --compatible-runtimes nodejs20.x \
            --compatible-architectures x86_64 \
            --region $REGION \
            --query 'LayerVersionArn' --output text)

          echo "LAYER_VERSION_ARN=$LAYER_ARN" >> $GITHUB_OUTPUT

      - name: Update Lambda Function Configuration (emenu-server)
        run: |
          OLD_LAYERS=$(aws lambda get-function-configuration \
            --function-name emenu-server \
            --region $REGION \
            --query 'Layers[].Arn' \
            --output json)

          NEW_LAYERS=$(echo "$OLD_LAYERS" | jq -r --arg new_layer "${{ steps.publish_layer.outputs.LAYER_VERSION_ARN }}" '
            map(select(. | contains("common-mongoose-models") | not)) + [$new_layer] | join(",")')

          echo "Updating emenu-server with layers: $NEW_LAYERS"

          aws lambda update-function-configuration \
            --function-name emenu-server \
            --layers "$NEW_LAYERS" \
            --region $REGION \
            --no-cli-pager

      - name: Update Lambda Function Configuration (emenu_post_confirmation)
        run: |
          OLD_LAYERS=$(aws lambda get-function-configuration \
            --function-name emenu_post_confirmation \
            --region $REGION \
            --query 'Layers[].Arn' \
            --output json)

          NEW_LAYERS=$(echo "$OLD_LAYERS" | jq -r --arg new_layer "${{ steps.publish_layer.outputs.LAYER_VERSION_ARN }}" '
            map(select(. | contains("common-mongoose-models") | not)) + [$new_layer] | join(",")')

          echo "Updating emenu_post_confirmation with layers: $NEW_LAYERS"

          aws lambda update-function-configuration \
            --function-name emenu_post_confirmation \
            --layers "$NEW_LAYERS" \
            --region $REGION \
            --no-cli-pager
