name: Lambda Layer Deploy

on:
  push:
    branches: [dev]
    paths:
      - 'lambdas/layers/common_models/**' # Trigger only when common_models layer changes

jobs:
  deploy-layer-and-update-lambdas:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Layer dependencies
        working-directory: lambdas/layers/common_models/nodejs
        run: npm install

      - name: Package Layer zip
        working-directory: lambdas/layers/common_models
        run: zip -r common_models_layer.zip nodejs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      # --- Optimized Step: Upload Layer zip to S3 (fixed key) ---
      - name: Upload Layer zip to S3
        run: |
          # Upload to a fixed S3 key. Lambda 'publish-layer-version' will detect content changes.
          aws s3 cp lambdas/layers/common_models/common_models_layer.zip s3://emenu-lambda-code-bucket/layers/common_models/common_models_layer.zip
        env:
          S3_BUCKET_NAME: emenu-lambda-code-bucket # Ensure this matches your S3 bucket name

      - name: Publish new Layer Version
        id: publish_layer # Add an ID to this step to reference its outputs
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name common-mongoose-models \
            --description "Updated common models layer via GitHub Actions" \
            --content S3Bucket=${{ env.S3_BUCKET_NAME }},S3Key=layers/common_models/common_models_layer.zip \
            --compatible-runtimes nodejs20.x \
            --compatible-architectures "x86_64" \
            --region ap-southeast-2 \
            --query 'LayerVersionArn' --output text)
          echo "LAYER_VERSION_ARN=$LAYER_ARN" >> $GITHUB_OUTPUT
        env:
          S3_BUCKET_NAME: emenu-lambda-code-bucket # Make sure S3 bucket name is available

      # --- Steps to Update Lambda Functions to Use the New Layer Version ---
      # These steps are crucial for the layer update to take effect on the Lambda functions.
      # We need to fetch existing layers, remove old versions of our target layer,
      # and add the new layer version ARN.

      - name: Get current Lambda configurations (emenu-server)
        id: get_server_lambda_config
        run: |
          # Fetch JSON and Base64 encode it for safe passing via GITHUB_OUTPUT
          CURRENT_LAYERS_JSON=$(aws lambda get-function-configuration --function-name emenu-server --region ap-southeast-2 --query 'Layers[].Arn' --output json)
          echo "CURRENT_SERVER_LAYERS_BASE64=$(echo -n "$CURRENT_LAYERS_JSON" | base64 -w 0)" >> $GITHUB_OUTPUT

      - name: Update Lambda Function Configuration (emenu-server)
        run: |
          NEW_LAYERS_ARRAY=()
          NEW_LAYERS_ARRAY+=("${{ steps.publish_layer.outputs.LAYER_VERSION_ARN }}")

          # Decode Base64 string back to JSON, then process with jq
          # KEY FIX: Changed "common-mongoose-models" to "common_mongoose_models" (underscore)
          EXISTING_SERVER_LAYERS=$(echo '${{ steps.get_server_lambda_config.outputs.CURRENT_SERVER_LAYERS_BASE64 }}' | base64 -d | jq -r '.[]' | grep -v "common_mongoose_models" || true)
          for layer_arn in $EXISTING_SERVER_LAYERS; do
            NEW_LAYERS_ARRAY+=("$layer_arn")
          done

          NEW_LAYERS=$(IFS=,; echo "${NEW_LAYERS_ARRAY[*]}")
          
          echo "Updating emenu-server with layers: $NEW_LAYERS"
          aws lambda update-function-configuration \
            --function-name emenu-server \
            --layers "$NEW_LAYERS" \
            --region ap-southeast-2 \
            --no-cli-pager

      - name: Get current Lambda configurations (emenu_post_confirmation)
        id: get_post_confirmation_lambda_config
        run: |
          # Fetch JSON and Base64 encode it for safe passing via GITHUB_OUTPUT
          CURRENT_LAYERS_JSON=$(aws lambda get-function-configuration --function-name emenu_post_confirmation --region ap-southeast-2 --query 'Layers[].Arn' --output json)
          echo "CURRENT_POST_CONFIRMATION_LAYERS_BASE64=$(echo -n "$CURRENT_LAYERS_JSON" | base64 -w 0)" >> $GITHUB_OUTPUT

      - name: Update Lambda Function Configuration (emenu_post_confirmation)
        run: |
          NEW_LAYERS_ARRAY=()
          NEW_LAYERS_ARRAY+=("${{ steps.publish_layer.outputs.LAYER_VERSION_ARN }}")

          # Decode Base64 string back to JSON, then process with jq
          # KEY FIX: Changed "common-mongoose-models" to "common_mongoose_models" (underscore)
          EXISTING_POST_CONFIRMATION_LAYERS=$(echo '${{ steps.get_post_confirmation_lambda_config.outputs.CURRENT_POST_CONFIRMATION_LAYERS_BASE64 }}' | base64 -d | jq -r '.[]' | grep -v "common_mongoose_models" || true)
          for layer_arn in $EXISTING_POST_CONFIRMATION_LAYERS; do
            NEW_LAYERS_ARRAY+=("$layer_arn")
          done

          NEW_LAYERS=$(IFS=,; echo "${NEW_LAYERS_ARRAY[*]}")

          echo "Updating emenu_post_confirmation with layers: $NEW_LAYERS"
          aws lambda update-function-configuration \
            --function-name emenu_post_confirmation \
            --layers "$NEW_LAYERS" \
            --region ap-southeast-2 \
            --no-cli-pager
